#+TITLE: Controller
#+AUTHOR: VLEAD
#+DATE: [2017-04-06 Thursday]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export
#+TAGS: boilerplate(b)
#+EXCLUDE_TAGS: boilerplate

* Introduction 
  This document lists all that is necessary to control the
  transition of states in the vlabs landing pages. 
* Index page on load 
   The index page has a controller, content and footer.  The
   footer is set to an iframe.  The content - disciplines,
   institutes, labs of an institute, labs of a discipline
   and all the labs are displayed in the content division of
   the index page.  The lab itself

   The content is either:
   1. list of disciplines
   2. list of institutes
   3. list of labs which can either be:
      1. labs of a discipline
      2. labs of an institute or
      3. all labs
      or
   4. the lab itself. 

   The first three are displayed in the content division of
   the index page while the lab itself is displayed in an
   iframe that is embedded in the content division of the
   index page.

   On the initial load, the content lists all
   the disciplines.

#+NAME: load-index
#+BEGIN_SRC js
var loadIndex = function() {
  on_mouse_hover();
  insertFooterIframe();
  setFooterUrlToFooterIframe();
  populateDisciplineDropDownBox();
  populateInstituteDropDownBox();
  displayAllDisciplines();
  enableAllLabsButton();
  displayBtnsForAuthentication();
  fillDataAndSetEventForLogUsage();
  fillDataAndSetEventForWsUsage();
};

#+END_SRC

* Mouse Over
   This function allows the dropdown menu on the mousehover
   event.
#+NAME: mouse-over
#+BEGIN_SRC javascript
var on_mouse_hover = function(){
$(".dropdown").hover(            
  function() {
    $('.dropdown-menu', this).not('.in .dropdown-menu').stop(true,true).slideDown("400");
    $(this).toggleClass('open');        
  },
  function() {
    $('.dropdown-menu', this).not('.in .dropdown-menu').stop(true,true).slideUp("400");
    $(this).toggleClass('open');       
  }
);
};
#+END_SRC

* Favicon
   =Favicon= image is dynamically created and appended to
   the =<head>= tag.
#+NAME: favicon
#+BEGIN_SRC javascript 
master = window.parent.document;
head = master.getElementsByTagName("head")[0];
favicon = master.createElement("link");
favicon.rel = "shortcut icon";
favicon.type = "image/png";
favicon.href = "http://files.vlabs.ac.in/lds/images/vlabs-logo/favicon.ico";
head.appendChild(favicon);

#+END_SRC

* Modify url
  #+NAME: modify-url
  #+BEGIN_SRC javascript 
var modifyUrl = function(url) {
  return hostedBaseForOpenEdx + "/" + url.split("/").slice(3).join("/");
};


  #+END_SRC
* Different Promises
** Define a promise to make an AJAX call
    This will be a generic promise that fulfills an ajax
    call.  [[https://developers.google.com/web/fundamentals/primers/promises][Ref Implementation]]
#+name: make-ajax-call
#+BEGIN_SRC js
var get = function get(url) {
  return new Promise(function(resolve, reject) {
    var req = new XMLHttpRequest(url);
    req.open('GET', url);
    req.onload = function() {
      if (req.status == 200) {
        resolve(req.response);
      } else {
        reject(Error(req.statusText));
      }
    };

    req.onerror = function() {
      reject(Error("network error"));
    };
    req.send();
  });
};

#+END_SRC

** Get Json for an API call    
    Uses the promises that makes the ajax call and applies
    the parsing on the response -- that is a json -- from
    the AJAX call. 
#+name: get-json
#+BEGIN_SRC js
var getJSON = function(resourcePath) {
  return get(resourcePath).then(JSON.parse);
};

#+END_SRC

** Discipline Promise
    This promise holds all the disciplines.  An AJAX is made
    only once, but the result will reside in the promise.
#+name: discipline-promise
#+BEGIN_SRC js
var disciplinePromise;
var getDisciplines = function() {
  disResPath = ldsUrl + "/disciplines";
  disciplinePromise = disciplinePromise || getJSON(disResPath);

  return disciplinePromise.then(function(disciplines) {
    return disciplines;
  });
}

#+END_SRC

** Institute Promise
    This promise holds all the institutes.  An AJAX is made
    only once, but the result will reside in the promise.
#+name: institute-promise
#+BEGIN_SRC js
var institutePromise;
var getInstitutes = function() {
  instResPath = ldsUrl + "/institutes";
  institutePromise = institutePromise || getJSON(instResPath);

  return institutePromise.then(function(institutes) {
    return institutes;
  });
}

#+END_SRC

** Labs Promise
    This promise holds all the labs.  An AJAX is made only
    once, but the result will reside in the promise.
#+name: lab-promise
#+BEGIN_SRC js
var labPromise;
var getLabs = function() {
  labResPath = ldsUrl + "/labs";
  labPromise = labPromise || getJSON(labResPath);

  return labPromise.then(function(labs) {
    return labs;
  });
}

#+END_SRC
** Labs By Institute and Discipline
   A corresponding promise stores the list of labs of a
   given institute or a given discipline.  An AJAX call is
   made whenever labs have not been retrieved earlier for
   either an institute or a discipline.

*** Filter a list based on a query
     If a query and a list are given, filter the elements in
     the list which match the query. [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter][Ref]]
#+name: filter-query
#+BEGIN_SRC js
var filterQuery = function(ls, id) {
  return ls.filter(function(el) {
    return el.id == id;
  });
};

#+END_SRC

*** Get Labs for a Discipline
     When labs for a discipline are retrieved for the first
     time, those labs are saved as a promise.  On any further
     requests on the same discipline, the same promise is
     returned.  
#+name: lab-by-discipline-promise
#+BEGIN_SRC js
var labsByDisciplinePromises = [];
var getLabsByDiscipline = function(discId) {
  var labByDiscResPath = ldsUrl + "/labs?discipline_name=" + discId;
  var searchList = filterQuery(labsByDisciplinePromises, discId);
  var labsByDiscPromise;
  if (searchList.length == 0) {
    labsByDiscPromise = getJSON(labByDiscResPath);
    labsByDisciplinePromises.push({'id': discId, 'promise': labsByDiscPromise});
  } else {
    labsByDiscPromise = searchList[0].promise;
  }

  return labsByDiscPromise.then(function(labs) {
    return labs;
  });
};

#+END_SRC

*** Get Labs for an Institute
     When labs for a institute are retrieved for the first
     time, those labs are saved as a promise.  On any further
     requests on the same institute, the same promise is
     returned.  
#+name: lab-by-institute-promise
#+BEGIN_SRC js
var labsByInstitutePromises = [];
var getLabsByInstitute = function(instId) {
  var labByInstResPath = ldsUrl + "/labs?institute_name=" + instId;
  var searchList = filterQuery(labsByInstitutePromises, instId);
  var labsByInstPromise;
  if (searchList.length == 0) {
    labsByInstPromise = getJSON(labByInstResPath);
    labsByInstitutePromises.push({'id': instId, 'promise': labsByInstPromise});
  } else {
    labsByInstPromise = searchList[0].promise;
  }

  return labsByInstPromise.then(function(labs) {
    return labs;
  });
};

#+END_SRC

** WorkShop Usage
#+name: ws-usage
#+BEGIN_SRC js
var wsUsagePromise;
var getWsUsage = function() {
  wsUsagePromise = wsUsagePromise || getJSON(wsUsageUrl);
  return wsUsagePromise.then(function(data) {
    return data;
  });
}

#+END_SRC

** Usage from Logs
#+name: log-usage
#+BEGIN_SRC js
var logUsagePromise;
var getLogUsage = function() {
  logUsagePromise = logUsagePromise || getJSON(logUsageUrl);
  return logUsagePromise.then(function(data) {
    return data;
  });
}

#+END_SRC


* Fill the Discipline Combo Box
** The Flow
  The discipline combo box contains list of available
  disciplines plus =All Disciplines=.  Each item in the
  combo box is attached to an =onclick= event.  When
  =onclick= event is triggered for each discipline, the labs
  of that particular discipline are displayed.  The
  =onclick= event for =All Disciplines= displays a page with
  all the available disciplines.  

#+name: populate-discipline-combo-box
#+BEGIN_SRC js
var populateDisciplineDropDownBox = function() {
  getDisciplines()
    .then(buildDisciplineDropDownList)
    .then(attachDisciplineListToBox)
    .catch(function(err) {
      console.log("Error from populateDisciplineDropDownBox: " + err);
    });
};
#+END_SRC

** Build the items in the discipline drop down box
   We already have a promise that on success returns the
   list of disciplines in the json format.  The format of
   each element in the discipline list is:
   #+BEGIN_EXAMPLE
    {
      "id": "1",
      "discipline_name": "Aerospace Engineering",
      "assets": [
        {
          "path": "aerospace-engineering.png",
          "asset_type": {
            "asset_type": "image",
            "id": "1"
          },
          "id": "378"
        }
      ],
      "discipline_id": "aero"
    }
   #+END_EXAMPLE

   A corresponding list item (li) is built from each of
   above such elements.  =discipline_name= becomes the
   display name while =onclick= event that is attached
   fetches all the labs belonging to this discipline
   identified by =disciplie_id=.  Apart from list item for
   each discipline, =All Disciplines= is also part of the
   drop down menu, and when clicked displays all the
   disciplines.  All the items in the drop down menu are
   sorted alphabetically.

   - References
     1. [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort][Sorting]]
     2. [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce][map]]
     3. [[https://medium.freecodecamp.org/reduce-f47a7da511a9][reduce]]
                   
#+name: build-discipline-drop-down-list
#+BEGIN_SRC js
var buildDisciplineDropDownList = function(disciplines) {
  disciplines.sort(function(a, b) {
    var nameA = a['discipline_name'].toUpperCase(); // ignore upper and lowercase
    var nameB = b['discipline_name'].toUpperCase(); // ignore upper and lowercase
    if (nameA < nameB) {
      return -1;
    }
    if (nameA > nameB) {
      return 1;
    }
    // names must be equal
    return 0;
  });

  var liList = disciplines.map(function(discipline) {
    return '<li onclick="handleEventOnADiscipline(this)" value="' +
      discipline['discipline_name'] + '" id="' + discipline['discipline_name'] + 
      '"><a>' + discipline['discipline_name'] + '</a></li>';
  });

  var allDisciplinesItem = '<li onclick="displayAllDisciplines()"> <a>All Disciplines</a></li>';

  var dropDownContent = liList.reduce(function(acc, liItem) {
    acc += liItem;
    return acc;
  }, allDisciplinesItem);

  return dropDownContent;

};

#+END_SRC

** Attach Discipline list to the drop down box
   The discipline drop down content is attached to the box. 
#+name: attach-discipline-list-to-box
#+BEGIN_SRC js
var attachDisciplineListToBox = function(content) {
  $('.filterDisciplineComboBox').empty();
  $('.filterDisciplineComboBox').append(content);
};

#+END_SRC
** Handle click event on a Discipline in the combo box
   The click event is attached to a callback that displays
   all the labs of that discipline. 
#+name: handle-event-on-a-discipline
#+BEGIN_SRC js
var handleEventOnADiscipline = function(obj) {
  displayLabsOfDiscipline(obj.id);
};

#+END_SRC

* Fill the Institute Combo Box
** The Flow
  The Institute combo box contains list of available
  Institutes plus =All Institutes=.  Each item in the combo
  box is attached to an =onclick= event.  When =onclick=
  event is triggered for each institute, the labs of that
  particular institute are displayed.  The =onclick= event
  for =All Institutes= displays a page with all the
  available institutes.

#+name: populate-institute-combo-box
#+BEGIN_SRC js
var populateInstituteDropDownBox = function() {
  getInstitutes()
    .then(buildInstituteDropDownList)
    .then(attachInstituteListToBox)
    .catch(function(err) {
      console.log("Error from populateInstituteDropDownBox: " + err);
    });
};
#+END_SRC

** Build the items in the institute drop down box
   We already have a promise that on success returns the
   list of institutes in the json format.  The format of
   each element in the institute list is:
   #+BEGIN_EXAMPLE
    {
      "assets": [
        {
          "asset_type": {
            "asset_type": "image", 
            "id": "1"
          }, 
          "id": "144", 
          "path": "iit-bombay.png"
        }
      ], 
      "id": "4", 
      "institute_id": "iitb", 
      "institute_name": "IIT Bombay"
    }
   #+END_EXAMPLE

   A corresponding list item (li) is built from each of
   above such elements.  =institute_name= becomes the
   display name while =onclick= event that is attached
   fetches all the labs belonging to this institute
   identified by =disciplie_id=.  Apart from list item for
   each institute, =All Institutes= is also part of the
   drop down menu, and when clicked displays all the
   institutes.  All the items in the drop down menu are
   sorted alphabetically.
#+name: build-institute-drop-down-list
#+BEGIN_SRC js
var buildInstituteDropDownList = function(institutes) {
  institutes.sort(function(a, b) {
    var nameA = a['institute_name'].toUpperCase(); // ignore upper and lowercase
    var nameB = b['institute_name'].toUpperCase(); // ignore upper and lowercase
    if (nameA < nameB) {
      return -1;
    }
    if (nameA > nameB) {
      return 1;
    }
    // names must be equal
    return 0;
  });

  var liList = institutes.map(function(institute) {
    return '<li onclick="handleEventOnAInstitute(this)" value="' +
      institute['institute_name'] + '" id="' + institute['institute_name'] + 
      '"><a>' + institute['institute_name'] + '</a></li>';
  });

  var allInstitutesItem = '<li onclick="displayAllInstitutes()"> <a>All Institutes</a></li>';

  var dropDownContent = liList.reduce(function(acc, liItem) {
    acc += liItem;
    return acc;
  }, allInstitutesItem);

  return dropDownContent;

};

#+END_SRC

** Attach Institute list to the drop down box
   The institute drop down content is attached to the box. 
#+name: attach-institute-list-to-box
#+BEGIN_SRC js
var attachInstituteListToBox = function(content) {
  $('.filterInstituteComboBox').empty();
  $('.filterInstituteComboBox').append(content);
};

#+END_SRC

** Handle click event on an Institute in the combo box
   The click event is attached to a callback that displays
   all the labs of that institute. 
#+name: handle-event-on-a-institute
#+BEGIN_SRC js
var handleEventOnAInstitute = function(obj) {
  displayLabsOfInstitute(obj.id);
};

#+END_SRC
* Display the page with all Disciplines
** The Flow
   A page listing all disciplines is displayed.  This page
   contains name, image and a click event attached to each
   discipline.  Clicking on a discipline displays all the
   labs of that discipline. 
#+name: display-disciplines
#+BEGIN_SRC js
var displayAllDisciplines = function() {
 getDisciplines()
    .then(buildDisciplineDisplayList)
    .then(setContentInContentDiv)
    .catch(function(err) {
      console.log("Error from displayAllDisciplines: " + err);
    });
};

#+END_SRC
   
** Build discipline display list
   Display list is build from the list of disciplines
   returned in the json format from the =getDisciplines=
   promise.  For each discipline, name and image are
   displayed and a click event is attached.  The click event
   when triggered displays all the labs of that particular
   discipline. 
#+name: build-discipline-display-list
#+BEGIN_SRC js
var buildDisciplineDisplayList = function(disciplines) {
  disciplines.sort(function(a, b) {
    var nameA = a['discipline_name'].toUpperCase(); // ignore upper and lowercase
    var nameB = b['discipline_name'].toUpperCase(); // ignore upper and lowercase
    if (nameA < nameB) {
      return -1;
    }
    if (nameA > nameB) {
      return 1;
    }
    // names must be equal
    return 0;
  });

  var displayList = disciplines.map(function(discipline) {
    var discipline_id = discipline['discipline_name'];
    var discipline_name = discipline['discipline_name'];                                                          
    var image_name = discipline['assets'][0]['path'];
    var image_path = disciplineImagesUrl + image_name;
    return '<div class="col-lg-3 col-md-4 col-xs-12 thumb" onclick="handleEventOnADiscipline(this)" src="' +
      image_path + '" id="' + discipline_id + '"><div class="thumbnail" style="cursor:pointer; padding: 0px !important; padding-top:15px !important;"> <a><img class="img-responsive " onclick="handleEventOnADiscipline(this)" src="' + image_path +'" id="' + discipline_id + '"><div class="caption" style="min-height: 110px;"><h4 onclick="handleEventOnADiscipline(this)"  src="' + image_path +'" id="' + discipline_id + '" style="text-align:center; color:#2c99ce;" >'+ discipline_name +'</h4></a></div></div></div>';
  });

  var displayDisciplines = displayList.reduce(function(acc, el) {
    acc += el;
    return acc;
  });
   return '<div class="container-fluid"><div class="row">' + 
    displayDisciplines +
    '</div></div>';
};

#+END_SRC


** Set Content in ContentDiv
   Attach the display content to content division
   The display content contains images, names
   and callbacks for =click= event.

   The steps here are:
   1. If an iframe exists in the content div, that iframe is
      deleted.
   2. The current content of content division is cleared.
   3. The new content is set to the content division.
#+name: set-content-in-content-div
#+BEGIN_SRC js
var setContentInContentDiv = function(content) {
  deleteFrameInDivision("contentIframe", "contentDiv");
  elem = document.getElementById("contentDiv");
  elem.innerHTML = "";
  elem.innerHTML = content;
};
#+END_SRC

* Display the page with all Institutes
** The Flow
   A page listing all institutes is displayed.  This page
   contains name, image and a click event attached to each
   institute.  Clicking on a institute displays all the
   labs of that institute. 
#+name: display-institutes
#+BEGIN_SRC js
var displayAllInstitutes = function() {
 getInstitutes()
    .then(buildInstituteDisplayList)
    .then(setContentInContentDiv)
    .catch(function(err) {
      console.log("Error from displayAllInstitutes: " + err);
    });
};

#+END_SRC

** Build institute display list
   Display list is built from the list of institutes
   returned in the json format from the =getInstitutes=
   promise.  For each institute, name and image are
   displayed and a click event is attached.  The click event
   when triggered displays all the labs of that particular
   institute. 
#+name: build-institute-display-list
#+BEGIN_SRC js
var buildInstituteDisplayList = function(institutes) {
  institutes.sort(function(a, b) {
    var nameA = a['institute_name'].toUpperCase(); // ignore upper and lowercase
    var nameB = b['institute_name'].toUpperCase(); // ignore upper and lowercase
    if (nameA < nameB) {
      return -1;
    }
    if (nameA > nameB) {
      return 1;
    }
    // names must be equal
    return 0;
  });

  var displayList = institutes.map(function(institute) {
    var institute_id = institute['institute_name'];
    var institute_name = institute['institute_name'];                                                          
    var image_name = institute['assets'][0]['path'];
    var image_path = instituteImagesUrl + image_name;
    return '<div class="col-lg-3 col-md-4 col-xs-12 thumb" onclick="handleEventOnAInstitute(this)" src="' +
      image_path + '" id="' + institute_id + '"><div class="thumbnail" style="cursor:pointer; padding: 0px !important; padding-top:15px !important;"> <a><img class="img-responsive " onclick="handleEventOnAInstitute(this)" src="' + image_path +'" id="' + institute_id + '"><div class="caption" style="min-height: 110px;"><h4 onclick="handleEventOnAInstitute(this)"  src="' + image_path +'" id="' + institute_id + '" style="text-align:center; color:#2c99ce;" >'+ institute_name +'</h4></a></div></div></div>';
  });

  var displayInstitutes = displayList.reduce(function(acc, el) {
    acc += el;
    return acc;
  });
   return '<div class="container-fluid"><div class="row">' + 
    displayInstitutes +
    '</div></div>';
};

#+END_SRC

* Display the page with labs of a Discipline
** The Flow
   A page listing all the labs of a discipline is displayed.
   This page contains name, image and a click event attached
   to each lab.  Clicking on a lab displays the lab.
#+name: display-labs-of-discipline
#+BEGIN_SRC js
var displayLabsOfDiscipline = function(discId) {
 getLabsByDiscipline(discId)
    .then(filterByPhase2Labs)
    .then(buildLabsDisplayList)
    .then(setContentInContentDiv)
    .catch(function(err) {
      console.log("Error from displayLabsOfDiscipline: " + err);
    });
};

#+END_SRC

** COMMENT Build Lab display list
   Display list is built from the list of labs returned in
   the json format either from =getLabsByDiscipline= or
   =getLabsByInstitute= or =getLabs= promise. For each lab, name and image are
   displayed and a click event is attached.  The click event
   when triggered displays the lab page. 
#+name: build-labs-display-list
#+BEGIN_SRC js
var buildLabsDisplayList = function(labs) {

  labs.sort(function(a, b) {
    var nameA = a['lab_name'].toUpperCase(); // ignore upper and lowercase
    var nameB = b['lab_name'].toUpperCase(); // ignore upper and lowercase
    if (nameA < nameB) {
      return -1;
    }
    if (nameA > nameB) {
      return 1;
    }
    // names must be equal
    return 0;
  });

  var displayList = labs.map(function(lab) {
    var lab_name = lab['lab_name'];                                                                      
    var hosted_url = getTheRightUrl(lab['hosting_info']);

    var assets = lab['assets'];
    for(i = 0; i < assets.length; i++) {
      var asset_type = lab['assets'][i]['asset_type']['asset_type'];
      var path = lab['assets'][i]['path'];
      if (asset_type == 'image') {
        var image_name = lab['assets'][i]['path'];
        path = labImagesUrl + image_name;
      }
    }
    return '<div class=" col-md-3 " id='+ lab_name + '> <div class="thumbnail" style="cursor:pointer; padding: 0px !important;"><a><img class="img-responsive" onclick="javascript:handleEventOnLab(this)" src="' + path +'" id="' + hosted_url + '"><div class="caption" style="min-height: 110px;"><h4 onclick="javascript:handleEventOnLab(this)"  src="' + path +'" id="' + hosted_url + '" style="text-align:center; color:#2c99ce;" >'+ lab_name +'</h4></a></div></div></div>';
  });

  var displayLabs = displayList.reduce(function(acc, el) {
    acc += el;
    return acc;
  });
  return '<div class="container-fluid"><div class="row">' + 
    displayLabs +
    '</div></div>';
};

#+END_SRC

* Get the right Url for a lab
  A lab is hosted at multiple places - production openedx,
  multiple test openedx servers, multiple cloud servers
  (production, test, staging) and probably at an institute.
  When the labs are displayed, the url that is attached to
  open on the click event determines where the lab is
  fetched from.  This url is configurable - say for this
  landing pages version, pick the openedx url from a certain
  test instance, or pick the cloud url from a certain
  staging instance.   This is achieved by setting the
  =openEdxHosted= and =cloudHosted= variables to the server
  instances where the labs are hosted.  A first and second
  choice alternates between either =openedx= or =cloud=.
  The third choice is the institute url. 

#+name: select-the-right-url
#+BEGIN_SRC js
var getTheRightUrl = function(hostingInfos) {
  var filterHostingInfo = function(hostingInfos, key) {
    return hostingInfos.filter(function(hostingInfo) {
      return hostingInfo.hosted_on == key;
    });
  };

  var getAtleastOneHostingInfo = function(hostingInfos) {
    var filteredHostingInfos = filterHostingInfo(hostingInfos, firstChoiceUrl);

    if (filteredHostingInfos.length == 0) {
      filteredHostingInfos = filterHostingInfo(hostingInfos, secondChoiceUrl);
    }

    if (filteredHostingInfos.length == 0) {
      filteredHostingInfos = filterHostingInfo(hostingInfos, thirdChoiceUrl);
    }

    if (filteredHostingInfos.length > 0) {
      return filteredHostingInfos[0];
    } else {
      return null;
    }
  };

  var hostedUrl = "";
  var hostingInfo = getAtleastOneHostingInfo(hostingInfos);
  if (hostingInfo != null) {
    if (hostingInfo['hosted_on'] == openEdxHosted) {
      hostedUrl = modifyUrl(hostingInfo['hosted_url']);
    } else {
      hostedUrl = hostingInfo['hosted_url'];
    }
  }
  return hostedUrl;
};
#+END_SRC


* Display the page with labs of an Institute
** The Flow
   A page listing all the labs of a institute is displayed.
   This page contains name, image and a click event attached
   to each lab.  Clicking on a lab displays the lab.
#+name: display-labs-of-institute
#+BEGIN_SRC js
var displayLabsOfInstitute = function(instId) {
 getLabsByInstitute(instId)
    .then(buildLabsDisplayList)
    .then(setContentInContentDiv)
    .catch(function(err) {
      console.log("Error from displayLabsOfInstitute: " + err);
    });
};

#+END_SRC

* Display all Labs
  A page listing all the labs is displayed.  This page
  contains name, image and a click event attached to each
  lab.  Clicking on a lab displays the lab.
#+name: display-all-labs
#+BEGIN_SRC js
var displayAllLabs = function() {
  getLabs()
    .then(buildLabsDisplayList)
    .then(setContentInContentDiv)
    .catch(function(err) {
      console.log("Error from displayAllLabs: " + err);
    });
};

#+END_SRC
* Display Phase-2 Labs
#+name: display-phase-2-labs
#+BEGIN_SRC js

var filterByPhase2Labs = function(labs) {
  var displayFilterPhase2Labs = [];
  var count=0;
  console.log(labs);
  console.log(labs.length);
  var phase2Labs = labs.filter(function(labs) {
    //console.log(labsByPhasePromise.phase[0]);
    if(labs.phase.length == 1) {
      displayFilterPhase2Labs.push({labs});
//      console.log(count);
//      count++; 
    } 
  });
  console.log(displayFilterPhase2Labs);
  console.log(displayFilterPhase2Labs.length);
  return displayFilterPhase2Labs;
};
// ---------------------------------------------------------------------------------------------


#+END_SRC


* Display Labs By KeyWord
** The Flow
  The labs that match the keyword are displayed.  The
  function is attached to both the =keyup= and =click=
  events of the search box.  The labs are filtered based on
  the keyword and the list is displayed.  
#+name: display-labs-by-keyword
#+BEGIN_SRC js
var displayLabsByKeyWord = function() {
  $('#keyword').keypress(function (e) {
    if (e.which == 13) {
      e.preventDefault();
    }                                                                               
  });
  var keyword = document.getElementById("keyword").value;
  getLabs()
    .then(function(labs) {
      return filterLabsByKeyWord(labs, keyword);
    })
    .then(buildLabsDisplayList)
    .then(setContentInContentDiv)
    .catch(function(err) {
      console.log("Error from displayLabsByKeyWord: " + err);
    });
};

#+END_SRC

** Filter the labs by a Keyword
   The labs are filtered on the basis of keyword matching.
   Labs that contain the keyword in their lab names are
   returned.
#+name: filter-labs-by-keyword
#+BEGIN_SRC js
var filterLabsByKeyWord = function(labs, keyword) {
  return labs.filter(function(lab) {
    return lab['lab_name'].toString().toLowerCase().indexOf(keyword.toLowerCase()) > -1;
  });
};

#+END_SRC
* Enable All Labs Button and Search Box
  Currently, the ajax call to fetch the data takes a while.
  The API that fetches all the labs has to refactored.
  Meanwhile, =All Labs= button and the =Search= box are
  disabled until the data is fetched. 
#+name: enable-all-labs-button
#+BEGIN_SRC js
var enableAllLabsButton = function() {
  getLabs()
    .then(function(labs) {
      var all_labs_element = document.getElementById("allLabs");
      all_labs_element.classList.remove("disabled");
      var search_element = document.getElementById("search");
      search_element.classList.remove("disabled");
    })
    .catch(function(err) {
      console.log("Error from enableAllLabsButton: " + err);
    });
};

#+END_SRC
* Display the Lab
** Handle the click on a Lab item
   Labs are listed for a discipline, institute, on search
   and all labs.  Whenever a click event occurs, the handler
   attached to the event gets the lab object and displays
   the lab. 
#+name: handle-event-on-lab
#+BEGIN_SRC js
var labUrl;
var handleEventOnLab = function(obj) {
  labUrl = obj.id;
  if (authenticated())
    displayLab(obj.id);
  else
    authenticate({id: loginUrl});
};

#+END_SRC
** Display the lab or any other application in a sandboxed iframe
  This is the actual lab being served from a different
  server.  The content of a lab is either served from Open
  edX or from a VM.  When the portal is https, and the lab
  is non http, it will not be displayed.  So, when an non
  https lab has to be displayed, the protocol is stripped
  before the iframe source is set.  [[https://stackoverflow.com/a/32510420/7305481][Reference]]

  Here the steps are:
  1. Create content iframe with sandboxed attribute to true.
  2. Set this iframe to Content Div of the main page.
  3. set the lab url to this frame.

#+name: display-lab
#+BEGIN_SRC js
var displayLab = function(url) {
  deleteFrameInDivision("contentIframe", "contentDiv");
  elem = document.getElementById("contentDiv");
  elem.innerHTML = "";
  var newFrame = createContentIframe();
  insertFrameInDivision(newFrame, "contentDiv");
  if (url.slice(0, 5) != "https") {
    url = url.slice(5,);
  }
  setUrlToSandBoxedContentIframe(url);
};
#+END_SRC

* Login Support
  Since Open edX does not provide an API for authentication,
  the controller decides if the user is successfully signed
  in by parsing the content of the page returned after
  successful login.

  The flow of login:
  1. Open edX login page or Register page is displayed in
     the content iframe.
  2. When the login is successful, Open edX redirects the
     page to Dashboard.
  3. When the Dashboard page is served by Open edX, a custom
     javascript is embedded into the page.
  4. This custom javascript posts the content of the page to
     the controller.
  5. The controller on receipt of this message, determines
     that the user has logged in and toggles the login
     button to logout.  Register button is made invisible.

  The above flow happens in the following scenarios:
  1. When the login button or register button id clicked.
  2. When a lab is clicked and the user is not logged in.

  When a lab hosted on Open edX is clicked and the user is
  not enrolled in this, Open edX platform displays the
  enroll page.  Once the user enrolls into this lab, Open
  edX redirects to Open edX Dashboard which is not the
  expected state.  The expected state is landing page of
  this lab.  When Dashboard page is displayed, a post
  message is sent to the controller, and the controller
  redirects to the landing page of the lab.
#+name: authentication
#+BEGIN_SRC js
var authenticated = function() {
  return document.cookie.includes("logged-in");
};

var authenticate = function(obj) {
  displayLab(obj.id);
};

var logoutHandler = function() {
  displayLab(logoutUrl);
  setTimeout(logoutCleanUp, 1000);
};

var logoutCleanUp = function() {
  document.cookie = "session-status='logged-out'";
  labUrl = "";
  displayBtnsForAuthentication();
  displayAllDisciplines();
};

var displayBtnsForAuthentication = function() {
  var lElem = document.getElementById("login");
  var rElem = document.getElementById("register");
  if (document.cookie.includes("logged-in")) {
    lElem.innerHTML = "Logout";
    lElem.removeEventListener("click", loginHandler);
    lElem.removeEventListener("click", logoutHandler);
    lElem.addEventListener("click", logoutHandler);
    rElem = document.getElementById("register");
    rElem.style.display = "none";
  } else {
    lElem.innerHTML = "Login";
    lElem.removeEventListener("click", logoutHandler);
    lElem.removeEventListener("click", loginHandler);
    lElem.addEventListener("click", loginHandler);
    rElem.style.display = "block";
    rElem.removeEventListener("click", registerHandler);
    rElem.addEventListener("click", registerHandler);
  }
};

var loginHandler = function() {
  authenticate({id: loginUrl});
};

var registerHandler = function() {
  authenticate({id: registerUrl});
};

#+END_SRC

* Support for Event Listening on post messages
  This is the support code for providing the ability to
  listen to the post messages sent to the index page. 
#+name: event-listener 
#+BEGIN_SRC js
var processPostMessage = function(event) {
  if (event.origin !== postServer) {
    return;
  } else {
    var recvMsg = JSON.parse(event.data);
    var msg = recvMsg.message.toLocaleLowerCase();
    if (msg.indexOf("my courses") != -1) {                                                                   
      document.cookie = "session-status='logged-in'";
      displayBtnsForAuthentication();
      if (labUrl)
        displayLab(labUrl)
      else
        displayAllDisciplines();
    }
  }
};

if (window.addEventListener) {                                                                                       
  window.addEventListener("message", processPostMessage, false);
} else {
  window.attachEvent("onmessage", processPostMessage);
}

#+END_SRC

* Fill and Set Click event to load Log Usage in Detail Page
#+name: fill-and-set-log-usage
#+BEGIN_SRC js
var displayLogUsage = function(data) {
  document.getElementById("logUsageDisplay").innerText = data["usage"]
};

var showLogUsageDetailPage = function() {
  displayLab(logUsageDetailUrl);
}

var setClickEventHandlerOnLogUsage = function() {
  document.getElementById("logUsageClick").removeEventListener("click", showLogUsageDetailPage);
  document.getElementById("logUsageClick").addEventListener("click", showLogUsageDetailPage);

};

var fillDataAndSetEventForLogUsage = function() {
  getLogUsage()
    .then(displayLogUsage)
    .then(setClickEventHandlerOnLogUsage)
    .catch(function(err) {
      console.log("Error from fillDataAndSetEventForLogUsage: " + err);
    });
};

#+END_SRC

* Fill and Set Click event to load workshop Usage in Detail Page
#+name: fill-and-set-ws-usage
#+BEGIN_SRC js
var displayWsUsage = function(data) {
  document.getElementById("wsUsageDisplay").innerText = data["usage"]
};

var showWsUsageDetailPage = function() {
  displayLab(wsUsageDetailUrl);
}

var setClickEventHandlerOnWsUsage = function() {
  document.getElementById("wsUsageClick").removeEventListener("click", showWsUsageDetailPage);
  document.getElementById("wsUsageClick").addEventListener("click", showWsUsageDetailPage);

};

var fillDataAndSetEventForWsUsage = function() {
  getWsUsage()
    .then(displayWsUsage)
    .then(setClickEventHandlerOnWsUsage)
    .catch(function(err) {
      console.log("Error from fillDataAndSetEventForWsUsage: " + err);
    });
};

#+END_SRC

* Display About Pages
  Display the about pages using the configured url.
#+name: display-about-pages
#+BEGIN_SRC js
var showAboutPage = function() {
  displayLab(aboutPagesUrl);
}

#+END_SRC
* Show OffLine Edition
  Display the offline edition web page
#+name: offline-edition
#+BEGIN_SRC js
var showOfflineEditionPage = function() {
  displayLab(offlineEditionUrl);
}

#+END_SRC
* Show Runtime Browser
  Display the page about runtime browser.
#+name: runtime-browser
#+BEGIN_SRC js
var showRuntimeBrowserPage = function() {
  displayLab(runtimeBrowserUrl);
}
#+END_SRC
* COMMENT Create a list of labs with lab id, hosting url and hosted platform
#+name: make-list-of-labs
#+BEGIN_SRC js
var labHostedOnOpenEdx = function(lab) {
  var hostingInfo = lab['hosting_info'];
  var retVal = false;
  for(var i = 0; i < hostingInfo.length; i++) {
    var hostedOn = lab['hosting_info'][i]['hosted_on'];
    if (hostedOn == "openedx" || hostedOn == "open-edx") {
      retVal = true;
      break;
    }
  }
  return retVal;
};

var filterLabs = function(labs) {
  return labs.filter(labHostedOnOpenEdx);
};

var makeNewListOfLabs = function() {
 getLabs()
    .then(filterLabs)
    .then(function(labs) {
      console.log(labs);
    })
    .catch(function(err) {
      console.log("Error from makeListOfLabs: " + err);
    });
};

#+END_SRC
* Tangle                                       :boilerplate:
** sources
#+BEGIN_SRC javascript :tangle js/main.js :eval no :noweb yes
<<load-index>>
<<add-script-tags>>
<<mouse-over>>
<<modify-url>>
<<make-ajax-call>>
<<get-json>>
<<discipline-promise>>
<<institute-promise>>
<<lab-promise>>
<<filter-query>>
<<lab-by-discipline-promise>>
<<lab-by-institute-promise>>
<<set-content-in-content-div>>
<<populate-discipline-combo-box>>
<<build-discipline-drop-down-list>>
<<attach-discipline-list-to-box>>
<<populate-institute-combo-box>>
<<build-institute-drop-down-list>>
<<attach-institute-list-to-box>>
<<display-disciplines>>
<<build-discipline-display-list>>
<<display-institutes>>
<<build-institute-display-list>>
<<select-the-right-url>>
<<display-labs-of-discipline>>
<<build-labs-display-list>>
<<display-labs-of-institute>>
<<display-all-labs>>
<<handle-event-on-lab>>
<<display-lab>>
<<handle-event-on-a-discipline>>
<<handle-event-on-a-institute>>
<<event-listener>>
<<enable-all-labs-button>>
<<filter-labs-by-keyword>>
<<display-labs-by-keyword>>
<<authentication>>
<<display-phase-2-labs>>
//<<make-list-of-labs>>
<<log-usage>>
<<fill-and-set-log-usage>>
<<ws-usage>>
<<fill-and-set-ws-usage>>
<<display-about-pages>>
<<runtime-browser>>
<<offline-edition>>
#+END_SRC

