#+TITLE: Runtime
#+AUTHOR: VLEAD
#+DATE: [2017-04-06 Thursday]
#+PROPERTY: results output
#+PROPERTY: exports code
#+SETUPFILE: ../org-templates/level-1.org
#+options: ^:nil
#+LATEX: Literal LaTeX code for export

* Introduction 
  :PROPERTIES:
  :CUSTOM_ID: introduction
  :END: 
  This "Literate Document" is an illustration of building
  =Vlabs landing Pages=. It includes updating the data in
  the web page, using =Lab Data Service=. This helps us
  achieve a lot of tasks, Some of them are mentioned below
  - It explains the approach to access the data of labs that
    are segregated based on institutes.
  - It explains the approach to access the data of labs that
    are segregated based on disciplines.
  - Accessing all the data of labs.


* Index page on load 
   Every page has a controller, content and footer.  Both
   the content and the footer are served from iframes.  The
   content is either:
   1. list of disciplines
   2. list of institutes
   3. list of labs which can either be:
      1. labs of a discipline
      2. labs of an institute or
      3. all labs
      or
   4. the lab itself. 

   On the initial load,  the content lists all the
   disciplines.  

#+NAME: load-index
#+BEGIN_SRC js
var loadIndex = function() {
  console.log("=======loading index page=====");
  on_mouse_hover();
  insertContentIFrame();
  insertFooterIFrame();
  setFooterContentInIframe();
  populateDisciplineDropDownBox();
  populateInstituteDropDownBox();
};

#+END_SRC

* Mouse Over
   This function allows the dropdown menu on the mousehover
   event.
#+NAME: mouse-over
#+BEGIN_SRC javascript
var on_mouse_hover = function(){
$(".dropdown").hover(            
  function() {
    $('.dropdown-menu', this).not('.in .dropdown-menu').stop(true,true).slideDown("400");
    $(this).toggleClass('open');        
  },
  function() {
    $('.dropdown-menu', this).not('.in .dropdown-menu').stop(true,true).slideUp("400");
    $(this).toggleClass('open');       
  }
);
};
#+END_SRC

* Favicon
   =Favicon= image is dynamically created and appended to
   the =<head>= tag.
#+NAME: favicon
#+BEGIN_SRC javascript 
master = window.parent.document;
head = master.getElementsByTagName("head")[0];
favicon = master.createElement("link");
favicon.rel = "shortcut icon";
favicon.type = "image/png";
favicon.href = "http://files.vlabs.ac.in/lds/images/vlabs-logo/favicon.ico";
head.appendChild(favicon);

#+END_SRC

* Modify url
  #+NAME: modify-url
  #+BEGIN_SRC javascript 
var modifyUrl = function(url) {
  return hosted_base + "/" + url.split("/").slice(3).join("/");
};


  #+END_SRC
* Different Promises
** Define a promise to make an AJAX call
    This will be a generic promise that fulfills an ajax
    call. 
#+name: make-ajax-call
#+BEGIN_SRC js
var get = function get(url) {
  return new Promise(function(resolve, reject) {
    var req = new XMLHttpRequest(url);
    req.open('GET', url);
    req.onload = function() {
      if (req.status == 200) {
        resolve(req.response);
      } else {
        reject(Error(req.statusText));
      }
    };

    req.onerror = function() {
      reject(Error("network error"));
    };
    req.send();
  });
};

#+END_SRC

** Get Json for an API call    
    Uses the promises that makes the ajax call and applies
    the parsing on the response -- that is a json -- from
    the AJAX call. 
#+name: get-json
#+BEGIN_SRC js
var getJSON = function(resourcePath) {
  return get(resourcePath).then(JSON.parse);
};

#+END_SRC

** Discipline Promise
    This promise holds all the disciplines.  An AJAX is made
    only once, but the result will reside in the promise.
#+name: discipline-promise
#+BEGIN_SRC js
var disciplinePromise;
var getDisciplines = function() {
  disResPath = lds_url + "/disciplines";
  disciplinePromise = disciplinePromise || getJSON(disResPath);

  return disciplinePromise.then(function(disciplines) {
    // console.log(disciplines);
    return disciplines;
  });
}

#+END_SRC

** Institute Promise
    This promise holds all the institutes.  An AJAX is made
    only once, but the result will reside in the promise.
#+name: institute-promise
#+BEGIN_SRC js
var institutePromise;
var getInstitutes = function() {
  instResPath = lds_url + "/institutes";
  institutePromise = institutePromise || getJSON(instResPath);

  return institutePromise.then(function(institutes) {
    // console.log(institutes);
    return institutes;
  });
}

#+END_SRC

** Labs Promise
    This promise holds all the labs.  An AJAX is made only
    once, but the result will reside in the promise.
#+name: lab-promise
#+BEGIN_SRC js
var labPromise;
var getLabs = function() {
  labResPath = lds_url + "/labs";
  labPromise = labPromise || getJSON(labResPath);

  return labPromise.then(function(labs) {
    // console.log(institutes);
    return labs;
  });
}

#+END_SRC
** Labs By Institute and Discipline
   A corresponding promise stores the list of labs of a
   given institute or a given discipline.  An AJAX call is
   made whenever labs have not been retrieved earlier for
   either an institute or a discipline.

*** Filter a list based on a query
     If a query and a list are given, filter the elements in
     the list which match the query. [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter][Ref]]
#+name: filter-query
#+BEGIN_SRC js
var filterQuery = function(ls, id) {
  return ls.filter(function(el) {
    return el.id == id;
  });
};

#+END_SRC

*** Get Labs for a Discipline
     When labs for a discipline are retrieved for the first
     time, those labs are saved as a promise.  On any further
     requests on the same discipline, the same promise is
     returned.  
#+name: lab-by-discipline-promise
#+BEGIN_SRC js
var labsByDisciplinePromises = [];
var getLabsByDiscipline = function(discName) {
  var labByDiscResPath = lds_url + "/labs?discipline_name=" + discName;
  var searchList = filterQuery(labsByDisciplinePromises, discName);
  var labsByDiscPromise;
  if (searchList.length == 0) {
    labsByDiscPromise = getJSON(labByDiscResPath);
    labsByDisciplinePromises.push({'id': discName, 'promise': labsByDiscPromise});
  } else {
    labsByDiscPromise = searchList[0].promise;
  }

  return labsByDiscPromise.then(function(labs) {
    return labs;
  });
};

#+END_SRC

*** Get Labs for an Institute
     When labs for a institute are retrieved for the first
     time, those labs are saved as a promise.  On any further
     requests on the same institute, the same promise is
     returned.  
#+name: lab-by-institute-promise
#+BEGIN_SRC js
var labsByInstitutePromises = [];
var getLabsByInstitute = function(instId) {
  var labByInstResPath = lds_url + "/labs?institute_name=" + instId;
  var searchList = filterQuery(labsByInstitutePromises, instId);
  var labsByInstPromise;
  if (searchList.length == 0) {
    labsByInstPromise = getJSON(labByInstResPath);
    labsByInstitutePromises.push({'id': instId, 'promise': labsByInstPromise});
  } else {
    labsByInstPromise = searchList[0].promise;
  }

  return labsByInstPromise.then(function(labs) {
    return labs;
  });
};

#+END_SRC

* Fill the Discipline Combo Box
** The Flow
  The discipline combo box contains list of available
  disciplines plus =All Disciplines=.  Each item in the
  combo box is attached to an =onclick= event.  When
  =onclick= event is triggered for each discipline, the labs
  of that particular discipline are displayed.  The
  =onclick= event for =All Disciplines= displays a page with
  all the available disciplines.  

#+name: populate-discipline-combo-box
#+BEGIN_SRC js
var populateDisciplineDropDownBox = function() {
  getDisciplines()
    .then(buildDisciplineDropDownList)
    .then(attachDisciplineListToBox)
    .catch(function(err) {
      console.log("Error from populateDisciplineDropDownBox: " + err);
    });
};
#+END_SRC

** Build the items in the discipline drop down box
   We already have a promise that on success returns the
   list of disciplines in the json format.  The format of
   each element in the discipline list is:
   #+BEGIN_EXAMPLE
    {
      "id": "1",
      "discipline_name": "Aerospace Engineering",
      "assets": [
        {
          "path": "aerospace-engineering.png",
          "asset_type": {
            "asset_type": "image",
            "id": "1"
          },
          "id": "378"
        }
      ],
      "discipline_id": "aero"
    }
   #+END_EXAMPLE

   A corresponding list item (li) is built from each of
   above such elements.  =discipline_name= becomes the
   display name while =onclick= event that is attached
   fetches all the labs belonging to this discipline
   identified by =disciplie_id=.  Apart from list item for
   each discipline, =All Disciplines= is also part of the
   drop down menu, and when clicked displays all the
   disciplines.  All the items in the drop down menu are
   sorted alphabetically.

   - References
     1. [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort][Sorting]]
     2. [[https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce][map]]
     3. [[https://medium.freecodecamp.org/reduce-f47a7da511a9][reduce]]
                   
#+name: build-discipline-drop-down-list
#+BEGIN_SRC js
var buildDisciplineDropDownList = function(disciplines) {
  disciplines.sort(function(a, b) {
    var nameA = a['discipline_name'].toUpperCase(); // ignore upper and lowercase
    var nameB = b['discipline_name'].toUpperCase(); // ignore upper and lowercase
    if (nameA < nameB) {
      return -1;
    }
    if (nameA > nameB) {
      return 1;
    }
    // names must be equal
    return 0;
  });

  var liList = disciplines.map(function(discipline) {
    return '<li onclick="displayLabsOfDiscipline(this)" value="' +
      discipline['discipline_name'] + '" id="' + discipline['discipline_id'] + 
      '"><a>' + discipline['discipline_name'] + '</a></li>';
  });

  var allDisciplinesItem = '<li onclick="displayAllDisciplines()"> <a>All Disciplines</a></li>';

  var dropDownContent = liList.reduce(function(acc, liItem) {
    acc += liItem;
    return acc;
  }, allDisciplinesItem);

  return dropDownContent;

};

#+END_SRC

** Attach Discipline list to the drop down box
   The discipline drop down content is attached to the box. 
#+name: attach-discipline-list-to-box
#+BEGIN_SRC js
var attachDisciplineListToBox = function(content) {
  $('.filterDisciplineComboBox').empty();
  $('.filterDisciplineComboBox').append(content);
};

#+END_SRC
* Fill the Institute Combo Box
** The Flow
  The Institute combo box contains list of available
  Institutes plus =All Institutes=.  Each item in the combo
  box is attached to an =onclick= event.  When =onclick=
  event is triggered for each institute, the labs of that
  particular institute are displayed.  The =onclick= event
  for =All Institutes= displays a page with all the
  available institutes.

#+name: populate-institute-combo-box
#+BEGIN_SRC js
var populateInstituteDropDownBox = function() {
  getInstitutes()
    .then(buildInstituteDropDownList)
    .then(attachInstituteListToBox)
    .catch(function(err) {
      console.log("Error from populateInstituteDropDownBox: " + err);
    });
};
#+END_SRC

** Build the items in the institute drop down box
   We already have a promise that on success returns the
   list of institutes in the json format.  The format of
   each element in the institute list is:
   #+BEGIN_EXAMPLE
    {
      "assets": [
        {
          "asset_type": {
            "asset_type": "image", 
            "id": "1"
          }, 
          "id": "144", 
          "path": "iit-bombay.png"
        }
      ], 
      "id": "4", 
      "institute_id": "iitb", 
      "institute_name": "IIT Bombay"
    }
   #+END_EXAMPLE

   A corresponding list item (li) is built from each of
   above such elements.  =institute_name= becomes the
   display name while =onclick= event that is attached
   fetches all the labs belonging to this institute
   identified by =disciplie_id=.  Apart from list item for
   each institute, =All Institutes= is also part of the
   drop down menu, and when clicked displays all the
   institutes.  All the items in the drop down menu are
   sorted alphabetically.
#+name: build-institute-drop-down-list
#+BEGIN_SRC js
var buildInstituteDropDownList = function(institutes) {
  institutes.sort(function(a, b) {
    var nameA = a['institute_name'].toUpperCase(); // ignore upper and lowercase
    var nameB = b['institute_name'].toUpperCase(); // ignore upper and lowercase
    if (nameA < nameB) {
      return -1;
    }
    if (nameA > nameB) {
      return 1;
    }
    // names must be equal
    return 0;
  });

  var liList = institutes.map(function(institute) {
    return '<li onclick="displayLabsOfInstitute(this)" value="' +
      institute['institute_name'] + '" id="' + institute['institute_id'] + 
      '"><a>' + institute['institute_name'] + '</a></li>';
  });

  var allInstitutesItem = '<li onclick="displayAllInstitutes()"> <a>All Institutes</a></li>';

  var dropDownContent = liList.reduce(function(acc, liItem) {
    acc += liItem;
    return acc;
  }, allInstitutesItem);

  return dropDownContent;

};

#+END_SRC

** Attach Institute list to the drop down box
   The institute drop down content is attached to the box. 
#+name: attach-institute-list-to-box
#+BEGIN_SRC js
var attachInstituteListToBox = function(content) {
  $('.filterInstituteComboBox').empty();
  $('.filterInstituteComboBox').append(content);
};

#+END_SRC

* Display the page with all Disciplines
** The Flow
   A page listing all disciplines is displayed.  This page
   contains name, image and a click event attached to each
   discipline.  Clicking on a discipline displays all the
   labs of that discipline. 
#+name: display-disciplines
#+BEGIN_SRC js
var displayAllDisciplines = function() {
 getDisciplines()
    .then(buildDisciplineDisplayList)
    .then(attachDisciplineDisplayListToIframe)
    .catch(function(err) {
      console.log("Error from displayAllDisciplines: " + err);
    });
};

#+END_SRC

** Build discipline display list
   Display list is build from the list of disciplines
   returned in the json format from the =getDisciplines=
   promise.  For each discipline, name and image are
   displayed and a click event is attached.  The click event
   when triggered displays all the labs of that particular
   discipline. 
#+name: build-discipline-display-list
#+BEGIN_SRC js
var buildDisciplineDisplayList = function(disciplines) {
  disciplines.sort(function(a, b) {
    var nameA = a['discipline_name'].toUpperCase(); // ignore upper and lowercase
    var nameB = b['discipline_name'].toUpperCase(); // ignore upper and lowercase
    if (nameA < nameB) {
      return -1;
    }
    if (nameA > nameB) {
      return 1;
    }
    // names must be equal
    return 0;
  });

  var displayList = disciplines.map(function(discipline) {
    var discipline_id = discipline['discipline_id'];
    var discipline_name = discipline['discipline_name'];                                                          
    var image_name = discipline['assets'][0]['path'];
    var image_path = discipline_images_url + image_name;
    return '<div class="col-lg-3 col-md-4 col-xs-12 thumb" onclick="displayLabsOfDiscipline(this)" src="' +
      image_path + '" id="' + discipline_id + '"><div class="thumbnail" style="cursor:pointer; padding: 0px !important; padding-top:15px !important;"> <a><img class="img-responsive " onclick="displayLabsOfDiscipline(this, 0)" src="' + image_path +'" id="' + discipline_id + '"><div class="caption" style="min-height: 110px;"><h4 onclick="displayLabsOfDiscipline(this)"  src="' + image_path +'" id="' + discipline_id + '" style="text-align:center; color:#2c99ce;" >'+ discipline_name +'</h4></a></div></div></div>';
  });

  var displayDisciplines = displayList.reduce(function(acc, el) {
    acc += el;
    return acc;
  });
   return '<div class="container-fluid"><div class="row">' + 
    displayDisciplines +
    '</div></div>';
};

#+END_SRC

** Attach the display content to an Iframe
   The display content for all disciplines with images, names
   and callbacks for =click= event generated in the previous
   step is set in contentIframe.  The steps here are:
   1. An iframe is created.
   2. The source of this iframe is set to =disciplines.html=
   3. This iframe is inserted into the =ContentDiv= of the
      index page. 
   4. =disciplines.html= contains a division named
      =ContentDiv= and the disciplines display content is
      set in this division. 
#+name: attach-discipline-display-list-to-iframe
#+BEGIN_SRC js
var attachDisciplineDisplayListToIframe = function(content) {
  deleteFrameInDivision("contentIframe", "contentDiv");
  var newFrame = createContentIframe();
  insertFrameInDivision(newFrame, "contentDiv");
  setContent(content, "disciplines.html");
};

#+END_SRC

* Display the page with all Institutes
** The Flow
   A page listing all institutes is displayed.  This page
   contains name, image and a click event attached to each
   institute.  Clicking on a institute displays all the
   labs of that institute. 
#+name: display-institutes
#+BEGIN_SRC js
var displayAllInstitutes = function() {
 getInstitutes()
    .then(buildInstituteDisplayList)
    .then(attachInstituteDisplayListToIframe)
    .catch(function(err) {
      console.log("Error from displayAllInstitutes: " + err);
    });
};

#+END_SRC

** Build institute display list
   Display list is built from the list of institutes
   returned in the json format from the =getInstitutes=
   promise.  For each institute, name and image are
   displayed and a click event is attached.  The click event
   when triggered displays all the labs of that particular
   institute. 
#+name: build-institute-display-list
#+BEGIN_SRC js
var buildInstituteDisplayList = function(institutes) {
  institutes.sort(function(a, b) {
    var nameA = a['institute_name'].toUpperCase(); // ignore upper and lowercase
    var nameB = b['institute_name'].toUpperCase(); // ignore upper and lowercase
    if (nameA < nameB) {
      return -1;
    }
    if (nameA > nameB) {
      return 1;
    }
    // names must be equal
    return 0;
  });

  var displayList = institutes.map(function(institute) {
    var institute_id = institute['institute_id'];
    var institute_name = institute['institute_name'];                                                          
    var image_name = institute['assets'][0]['path'];
    var image_path = institute_images_url + image_name;
    return '<div class="col-lg-3 col-md-4 col-xs-12 thumb" onclick="displayLabsOfInstitute(this)" src="' +
      image_path + '" id="' + institute_id + '"><div class="thumbnail" style="cursor:pointer; padding: 0px !important; padding-top:15px !important;"> <a><img class="img-responsive " onclick="displayLabsOfInstitute(this, 0)" src="' + image_path +'" id="' + institute_id + '"><div class="caption" style="min-height: 110px;"><h4 onclick="displayLabsOfInstitute(this)"  src="' + image_path +'" id="' + institute_id + '" style="text-align:center; color:#2c99ce;" >'+ institute_name +'</h4></a></div></div></div>';
  });

  var displayInstitutes = displayList.reduce(function(acc, el) {
    acc += el;
    return acc;
  });
   return '<div class="container-fluid"><div class="row">' + 
    displayInstitutes +
    '</div></div>';
};

#+END_SRC

** Attach the display content to an Iframe
   The display content for all institutes with images, names
   and callbacks for =click= event generated in the previous
   step is set in contentIframe.  The steps here are:
   1. An iframe is created.
   2. The source of this iframe is set to =institutes.html=
   3. This iframe is inserted into the =ContentDiv= of the
      index page. 
   4. =institutes.html= contains a division named
      =ContentDiv= and the institutes display content is
      set in this division. 
#+name: attach-institute-display-list-to-iframe
#+BEGIN_SRC js
var attachInstituteDisplayListToIframe = function(content) {
  deleteFrameInDivision("contentIframe", "contentDiv");
  var newFrame = createContentIframe();
  insertFrameInDivision(newFrame, "contentDiv");
  setContent(content, "institutes.html");
};

#+END_SRC

* Display the page with labs of a Discipline
** The Flow
   A page listing all the labs of a discipline is displayed.
   This page contains name, image and a click event attached
   to each lab.  Clicking on a lab displays the lab.
#+name: display-labs-of-discipline
#+BEGIN_SRC js
var displayLabsOfDiscipline = function(discId) {
 getLabsByDiscipline(discId)
    .then(buildLabsDisplayList)
    .then(attachLabsDisplayListToIframe)
    .catch(function(err) {
      console.log("Error from displayLabsOfDiscipline: " + err);
    });
};

#+END_SRC

** Build Lab display list
   Display list is built from the list of labs returned in
   the json format either from =getLabsByDiscipline= or
   =getLabsByInstitute= or =getLabs= promise. For each lab, name and image are
   displayed and a click event is attached.  The click event
   when triggered displays the lab page. 
#+name: build-labs-display-list
#+BEGIN_SRC js
var buildLabsDisplayList = function(labs) {
  labs.sort(function(a, b) {
    var nameA = a['lab_name'].toUpperCase(); // ignore upper and lowercase
    var nameB = b['lab_name'].toUpperCase(); // ignore upper and lowercase
    if (nameA < nameB) {
      return -1;
    }
    if (nameA > nameB) {
      return 1;
    }
    // names must be equal
    return 0;
  });

  var displayList = labs.map(function(lab) {
    var lab_name = lab['lab_name'];                                                                      
    var hosting_info = lab['hosting_info'];
    for(var i = 0; i< hosting_info.length; i++) {
      var hosted_on = lab['hosting_info'][i]['hosted_on'];
        if (hosting_info.length == 1) {
          var hosted_url = lab['hosting_info'][0]['hosted_url'];
        } else if(labs_hosted_platform == hosted_on) {
          hosted_url = modifyUrl(lab['hosting_info'][i]['hosted_url']);
        } else {        
          continue;
        }
      }                                                                                                            
    var assets = lab['assets'];
    for(i = 0; i < assets.length; i++) {
      var  asset_type = lab['assets'][i]['asset_type']['asset_type'];
      var path = lab['assets'][i]['path'];                                              
      if (asset_type == 'image') {
        var image_name = lab['assets'][i]['path'];
        path = lab_images_url + image_name;
      }
    }
    return '<div class=" col-md-3 " id='+ lab_name + '> <div class="thumbnail" style="cursor:pointer; padding: 0px !important;"><a><img class="img-responsive $onclick="javascript:validateAuthentication(this)" src="' + path +'" id="' + hosted_url + '"><div class="caption" style="min-height: 110px;"><h4 onclick="javascript:validateAuthentication(this)"  src="' + path +'" id="' + hosted_url + '" style="text-align:center; color:#2c99ce;" >'+ lab_name +'</h4></a></div></div></div>';
  });

  var displayLabs = displayList.reduce(function(acc, el) {
    acc += el;
    return acc;
  });
  return '<div class="container-fluid"><div class="row">' + 
    displayLabs +
    '</div></div>';
};

#+END_SRC

** Attach the display content to an Iframe
   The display content for all labs with images, names and
   callbacks for =click= event generated in the previous
   step is set in contentIframe.  The steps here are:
   1. An iframe is created.
   2. The source of this iframe is set to =labs.html=
   3. This iframe is inserted into the =ContentDiv= of the
      index page. 
   4. =labs.html= contains a division named
      =ContentDiv= and the labs display content is
      set in this division. 
#+name: attach-labs-display-list-to-iframe
#+BEGIN_SRC js
var attachLabsDisplayListToIframe = function(content) {
  deleteFrameInDivision("contentIframe", "contentDiv");
  var newFrame = createContentIframe();
  insertFrameInDivision(newFrame, "contentDiv");
  setContent(content, "labs.html");
};

#+END_SRC

* Display the page with labs of an Institute
** The Flow
   A page listing all the labs of a institute is displayed.
   This page contains name, image and a click event attached
   to each lab.  Clicking on a lab displays the lab.
#+name: display-labs-of-institute
#+BEGIN_SRC js
var displayLabsOfInstitute = function(instId) {
 getLabsByInstitute(instId)
    .then(buildLabsDisplayList)
    .then(attachLabsDisplayListToIframe)
    .catch(function(err) {
      console.log("Error from displayLabsOfInstitute: " + err);
    });
};

#+END_SRC

* Tangle 
** sources
*** Javascript
**** Main JS
#+BEGIN_SRC javascript :tangle js/main.js :eval no :noweb yes 
<<load-index>>
<<add-script-tags>>
<<mouse-over>>
<<modify-url>>
<<make-ajax-call>>
<<get-json>>
<<discipline-promise>>
<<institute-promise>>
<<lab-promise>>
<<filter-query>>
<<lab-by-discipline-promise>>
<<lab-by-institute-promise>>
<<populate-discipline-combo-box>>
<<build-discipline-drop-down-list>>
<<attach-discipline-list-to-box>>
<<populate-institute-combo-box>>
<<build-institute-drop-down-list>>
<<attach-institute-list-to-box>>
<<display-disciplines>>
<<build-discipline-display-list>>
<<attach-discipline-display-list-to-iframe>>
<<display-institutes>>
<<build-institute-display-list>>
<<attach-institute-display-list-to-iframe>>
<<display-labs-of-discipline>>
<<build-labs-display-list>>
<<attach-labs-display-list-to-iframe>>
<<display-labs-of-institute>>
#+END_SRC

